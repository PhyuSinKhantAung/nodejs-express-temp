/**
 * MCP Utilities (replaces expressServer.js)
 * API Client and utilities for MCP server
 */

import fetch from 'node-fetch';
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  transports: [new winston.transports.Console()]
});

export class ApiClient {
  constructor() {
    this.baseUrl = process.env.API_BASE_URL || '{{basePath}}{{^basePath}}https://app.build.io{{/basePath}}';
    this.accessToken = null;
  }

  getAccessToken() {
    if (this.accessToken) return this.accessToken;

    this.accessToken = process.env.API_TOKEN || process.env.ACCESS_TOKEN;
    
    if (!this.accessToken) {
      const tokenIndex = process.argv.indexOf('--token');
      if (tokenIndex !== -1 && process.argv[tokenIndex + 1]) {
        this.accessToken = process.argv[tokenIndex + 1];
      }
    }

    return this.accessToken;
  }

  async request({ method = 'GET', endpoint, queryParams = {}, body = null }) {
    const accessToken = this.getAccessToken();
    
    if (!accessToken) {
      throw new Error('No access token provided. Use --token argument or set API_TOKEN environment variable');
    }

    const url = new URL(endpoint, this.baseUrl);
    Object.keys(queryParams).forEach(key => {
      if (queryParams[key] !== undefined) {
        url.searchParams.append(key, queryParams[key]);
      }
    });

    const requestOptions = {
      method: method.toUpperCase(),
      headers: {
        'Authorization': 'Bearer ' + accessToken,
        'Content-Type': 'application/json',
        'User-Agent': '{{packageName}}/{{appVersion}}'
      }
    };

    if (body && method.toUpperCase() !== 'GET') {
      requestOptions.body = JSON.stringify(body);
    }

    logger.info('API Request: ' + method + ' ' + url.toString());

    const response = await fetch(url, requestOptions);
    
    if (!response.ok) {
      const errorBody = await response.text();
      throw new Error('HTTP ' + response.status + ': ' + errorBody);
    }

    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return await response.json();
    }
    return await response.text();
  }
}

const apiClient = new ApiClient();
export { apiClient };
