/**
 * Base Controller for MCP Tools
 * Converts controller methods to MCP tools
 */

import { formatResponse } from '../services/Service.js';
import { apiClient } from '../expressServer.js';
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  transports: [new winston.transports.Console()]
});

export class Controller {
  constructor(service) {
    this.service = service;
  }

  static sendResponse(res, response) {
    // In MCP context, this just returns the response
    return response;
  }

  static sendError(res, error) {
    // In MCP context, return error response
    return formatResponse({
      type: "error", 
      message: error.message || 'Operation failed'
    });
  }

  static collectRequestParams(request) {
    // In MCP context, extract parameters from args
    return {
      query: request.query || {},
      params: request.params || {},
      body: request.body || {}
    };
  }

  // Helper method to create MCP tool from controller method
  static createMCPTool(name, schema, handlerFn) {
    return {
      name: name,
      schema: schema,
      handler: handlerFn
    };
  }
}

export default Controller;
