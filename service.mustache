/**
 * {{classname}} Service
 * Generated from OpenAPI operations - contains actual API logic
 */

import { Service, formatResponse } from './Service.js';
import { apiClient } from '../expressServer.js';
import winston from 'winston';

const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  transports: [new winston.transports.Console()]
});

export class {{classname}}Service {
{{#operations}}
{{#operation}}

  /**
   * {{summary}}
   * {{notes}}
   * {{httpMethod}} {{path}}
   */
  static async {{operationId}}(args) {
    try {
      let endpoint = "{{path}}";
      const queryParams = {};
      const bodyData = {};

      // Handle path parameters
{{#allParams}}
{{#isPathParam}}
      if (args.{{paramName}}) {
        endpoint = endpoint.replace('{{{paramName}}}', encodeURIComponent(args.{{paramName}}));
      }
{{/isPathParam}}
{{#isQueryParam}}
      if (args.{{paramName}} !== undefined) {
        queryParams['{{paramName}}'] = args.{{paramName}};
      }
{{/isQueryParam}}
{{#isBodyParam}}
      if (args.{{paramName}} !== undefined) {
        bodyData['{{paramName}}'] = args.{{paramName}};
      }
{{/isBodyParam}}
{{/allParams}}

      // Make API request
      const requestOptions = {
        method: '{{httpMethod}}',
        endpoint: endpoint
      };

      if (Object.keys(queryParams).length > 0) {
        requestOptions.queryParams = queryParams;
      }

      if (Object.keys(bodyData).length > 0) {
        requestOptions.body = bodyData;
      }

      const response = await apiClient.request(requestOptions);

      return formatResponse({
        message: "{{summary}} completed successfully",
        data: response
      });

    } catch (error) {
      logger.error('Error in {{operationId}}:', error);
      return formatResponse({
        type: "error",
        message: "{{summary}} failed: " + (error.message || JSON.stringify(error))
      });
    }
  }
{{/operation}}
{{/operations}}
}

export default {{classname}}Service;
